export function cacheGet(key){
  try{ const raw=localStorage.getItem(key); if(!raw) return null;
    const {v,exp}=JSON.parse(raw); if(exp && Date.now()>exp){ localStorage.removeItem(key); return null; } return v;
  }catch{ return null; }
}
export function cacheSet(key,v,ttlMs){ try{ const exp=ttlMs?(Date.now()+ttlMs):null; localStorage.setItem(key, JSON.stringify({v,exp})); }catch{} }
export function haversineMiles(a,b){ const R=3958.8; const toRad=d=>d*Math.PI/180; const dLat=toRad(b.lat-a.lat); const dLon=toRad(b.lon-a.lon); const lat1=toRad(a.lat),lat2=toRad(b.lat); const h=Math.sin(dLat/2)**2+Math.cos(lat1)*Math.cos(lat2)*Math.sin(dLon/2)**2; return 2*R*Math.asin(Math.sqrt(h)); }
export function bboxFromCenterRadius(lat,lon,radiusMi){ const dLat=radiusMi/69; const dLon=radiusMi/(69*Math.cos(lat*Math.PI/180)); return {minLat:lat-dLat,maxLat:lat+dLat,minLon:lon-dLon,maxLon:lon+dLon}; }
export const ALL_GAME_FISH=['Largemouth Bass','Smallmouth Bass','Striped Bass','White Bass','Walleye','Northern Pike','Muskellunge','Rainbow Trout','Brown Trout','Brook Trout','Steelhead','Lake Trout','Crappie','Bluegill','Sunfish','Perch','Catfish','Carp','Sauger','Hybrid Striper'];
export function top20ForType(type){ if(/Lake/i.test(type)) return ['Largemouth Bass','Walleye','Crappie','Bluegill','Perch','Northern Pike','Muskellunge','Catfish','Hybrid Striper','White Bass','Rainbow Trout','Brown Trout','Lake Trout','Carp','Sauger','Sunfish','Smallmouth Bass','Striped Bass','Brook Trout','Steelhead']; if(/River|Stream/i.test(type)) return ['Smallmouth Bass','Walleye','Catfish','Carp','Sauger','Rainbow Trout','Brown Trout','Brook Trout','Steelhead','Crappie','Bluegill','Perch','White Bass','Striped Bass','Hybrid Striper','Muskellunge','Northern Pike','Largemouth Bass','Sunfish','Lake Trout']; return ALL_GAME_FISH; }
export function successScore(species, waterType, cond){ let score=50; const ideal=/Trout/i.test(species)?55:/Walleye|Sauger/i.test(species)?60:/Bass|Pike|Musk|Bluegill|Crappie/i.test(species)?68:62; score-=Math.min(30, Math.abs((cond.waterTempF??ideal)-ideal)); score+=Math.max(-10, Math.min(10, (cond.cloudPct-50)/10)); score+=Math.max(-10, Math.min(10, (10-Math.abs((cond.windMph??5)-8)))); score+=Math.max(-8, 8-Math.abs((cond.barometerInHg??29.92)-30)*8); if(/Bass|Trout|Pike|Musk/i.test(species) && (cond.turbidityFnu??0)>25) score-=8; return Math.max(5, Math.min(95, Math.round(score))); }
export function suggestGear(species, waterType, cond){ const common={rodAndLine:'Medium spinning, 8–12 lb mono/fluoro', lures:['Inline spinner','Small crankbait','Soft plastic grub'], locations:['Points','Windward banks','Current seams']}; if(/Trout/i.test(species)) return {rodAndLine:'Light spinning, 4–6 lb mono/fluoro', lures:['Rooster Tail','Panther Martin','Small spoons','Salmon eggs'], locations:['Riffle tailouts','Undercuts','Inflow plumes']}; if(/Walleye|Sauger/i.test(species)) return {rodAndLine:'Medium spinning, 6–10 lb braid + leader', lures:['Jig + minnow','Blade bait','Shad crank'], locations:['Current breaks','Dams/wing dams','Rocky points']}; if(/Bass/i.test(species)) return {rodAndLine:'Medium baitcaster/spinning, 10–15 lb fluoro', lures: cond.cloudPct>60 ? ['Chatterbait','Spinnerbait','Swimbait'] : ['Texas rig','Jig','Jerkbait'], locations:['Weed edges','Laydowns','Docks']}; return common; }
export function bestWindows({ sunriseTs, sunsetTs, hourly }){ if(!hourly?.length) return []; const out=[]; for(let i=0;i<hourly.length;i++){ const h=hourly[i]; const score=Math.max(10, Math.min(100, 60 + (h.cloudPct-50)/2 + (10-Math.abs((h.windMph??5)-8))*2)); out.push({ time:h.time, score:Math.round(score)}); } return out.sort((a,b)=>b.score-a.score).slice(0,6).sort((a,b)=>new Date(a.time)-new Date(b.time)); }
